<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-strict.xsd">
 <file original="xliff-core-1.2-strict.xsd" source-language="en" target-language="fa" datatype="plaintext" date="2015-04-29T03:04:45Z">
  <header>
   <phase-group>
    <phase tool-id="tmgmt" phase-name="extraction" process-name="extraction" job-id="20"/>
   </phase-group>
   <tool tool-id="tmgmt" tool-name="Drupal Translation Management Tools"/>
  </header>
  <body>
   <group id="110">
    <note>HTTPS Everywhere (menu:item:1953)</note>
    <trans-unit id="110][menu:item:1953:title" resname="110][menu:item:1953:title">
     <source xml:lang="en"><![CDATA[HTTPS Everywhere]]></source>
     <target xml:lang="fa"/>
     <note>Title</note>
    </trans-unit>
   </group>
   <group id="111">
    <note>Creating HTTPS Everywhere Rulesets (menu:item:1956)</note>
    <trans-unit id="111][menu:item:1956:title" resname="111][menu:item:1956:title">
     <source xml:lang="en"><![CDATA[Creating HTTPS Everywhere Rulesets]]></source>
     <target xml:lang="fa"/>
     <note>Title</note>
    </trans-unit>
   </group>
   <group id="112">
    <note>HTTPS Everywhere Atlas (menu:item:7475)</note>
    <trans-unit id="112][menu:item:7475:title" resname="112][menu:item:7475:title">
     <source xml:lang="en"><![CDATA[HTTPS Everywhere Atlas]]></source>
     <target xml:lang="fa"/>
     <note>Title</note>
    </trans-unit>
   </group>
   <group id="113">
    <note>How to Deploy HTTPS Correctly (menu:item:1955)</note>
    <trans-unit id="113][menu:item:1955:title" resname="113][menu:item:1955:title">
     <source xml:lang="en"><![CDATA[How to Deploy HTTPS Correctly]]></source>
     <target xml:lang="fa"/>
     <note>Title</note>
    </trans-unit>
   </group>
   <group id="114">
    <note>Report Bugs / Hack On The Code (menu:item:1957)</note>
    <trans-unit id="114][menu:item:1957:title" resname="114][menu:item:1957:title">
     <source xml:lang="en"><![CDATA[Report Bugs / Hack On The Code]]></source>
     <target xml:lang="fa"/>
     <note>Title</note>
    </trans-unit>
   </group>
   <group id="115">
    <note>FAQ (menu:item:1954)</note>
    <trans-unit id="115][menu:item:1954:title" resname="115][menu:item:1954:title">
     <source xml:lang="en"><![CDATA[FAQ]]></source>
     <target xml:lang="fa"/>
     <note>Title</note>
    </trans-unit>
   </group>
   <group id="116">
    <note>HTTPS Everywhere is a Firef...</note>
    <trans-unit id="116][singular" resname="116][singular">
     <source xml:lang="en"><![CDATA[HTTPS Everywhere is a Firefox, Chrome, and Opera extension that encrypts your communications with many major websites, making your browsing more secure.]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="117">
    <note>Encrypt the web: Install HT...</note>
    <trans-unit id="117][singular" resname="117][singular">
     <source xml:lang="en"><![CDATA[Encrypt the web: Install HTTPS Everywhere today.]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="118">
    <note>Install in Firefox</note>
    <trans-unit id="118][singular" resname="118][singular">
     <source xml:lang="en"><![CDATA[Install in Firefox]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="119">
    <note>Install in Firefox for Android</note>
    <trans-unit id="119][singular" resname="119][singular">
     <source xml:lang="en"><![CDATA[Install in Firefox for Android]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="120">
    <note>Install in Chrome</note>
    <trans-unit id="120][singular" resname="120][singular">
     <source xml:lang="en"><![CDATA[Install in Chrome]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="121">
    <note>Install in Opera</note>
    <trans-unit id="121][singular" resname="121][singular">
     <source xml:lang="en"><![CDATA[Install in Opera]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="122">
    <note>Recent Releases</note>
    <trans-unit id="122][singular" resname="122][singular">
     <source xml:lang="en"><![CDATA[Recent Releases]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="123">
    <note>Stable releases for Firefox:</note>
    <trans-unit id="123][singular" resname="123][singular">
     <source xml:lang="en"><![CDATA[Stable releases for Firefox:]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="124">
    <note>Stable releases for Chrome,...</note>
    <trans-unit id="124][singular" resname="124][singular">
     <source xml:lang="en"><![CDATA[Stable releases for Chrome, Chromium, and Opera 15+:]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="125">
    <note>Changelog.txt</note>
    <trans-unit id="125][singular" resname="125][singular">
     <source xml:lang="en"><![CDATA[Changelog.txt]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="126">
    <note>Note: If you install the st...</note>
    <trans-unit id="126][singular" resname="126][singular">
     <source xml:lang="en"><![CDATA[Note: If you install the standalone .crx (i.e. not from the Chrome Web Store), and you are using Windows, Chrome will automatically disable the extension on each restart. You may be able to work around by using developer mode. See ]]><bpt id="tjiid126-1">&lt;a href="https://github.com/EFForg/https-everywhere/issues/819"&gt;</bpt><![CDATA[this issue]]><ept id="tjiid126-1">&lt;/a&gt;</ept><![CDATA[.]]></source>
     <target xml:lang="fa"/>
     <note>Singular</note>
    </trans-unit>
   </group>
   <group id="128">
    <note>HTTPS Everywhere FAQ</note>
    <trans-unit id="128][body][0][value" resname="128][body][0][value">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><![CDATA[This page answers frequently-asked questions about EFF's ]]><bpt id="tjiid128-2">&lt;a href="/https-everywhere"&gt;</bpt><![CDATA[HTTPS Everywhere]]><ept id="tjiid128-2">&lt;/a&gt;</ept><![CDATA[ project. If your question isn't answered below, you can try the resources ]]><bpt id="tjiid128-4">&lt;a href="/https-everywhere/development"&gt;</bpt><![CDATA[listed here]]><ept id="tjiid128-4">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid128-1">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Body</note>
    </trans-unit>
    <trans-unit id="128][field_questions][0][question" resname="128][field_questions][0][question">
     <source xml:lang="en"><![CDATA[What if HTTPS Everywhere breaks some site that I use?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][0][answer" resname="128][field_questions][0][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><ept id="tjiid128-1">&lt;/p&gt;</ept><bpt id="tjiid128-3">&lt;a name="bugs"&gt;</bpt><ept id="tjiid128-3">&lt;/a&gt;</ept><bpt id="tjiid128-5">&lt;p&gt;</bpt><![CDATA[This is occasionally possible because of inconsistent support for HTTPS on sites (e.g., when a site seems to support HTTPS access but makes a few, unpredictable, parts of the site unavailable in HTTPS). If you ]]><bpt id="tjiid128-6">&lt;a href="/https-everywhere/development"&gt;</bpt><![CDATA[report the problem to us]]><ept id="tjiid128-6">&lt;/a&gt;</ept><![CDATA[, we can try to fix it. In the meantime, you can disable the rule affecting that particular site in your own copy of HTTPS Everywhere by clicking on the HTTPS Everywhere toolbar button (]]><bpt id="tjiid128-8">&lt;sub&gt;</bpt><ept id="tjiid128-8">&lt;/sub&gt;</ept><ph id="tjiid128-10" ctype="image" src="/sites/default/files/images_insert/https-everywhere-24.png" style="margin-top: 0px;"/><![CDATA[) and unchecking the rule for that site.]]><ept id="tjiid128-5">&lt;/p&gt;</ept><bpt id="tjiid128-12">&lt;p&gt;</bpt><![CDATA[You can also report the problem to the site, since they have the power to fix it!]]><ept id="tjiid128-12">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][1][question" resname="128][field_questions][1][question">
     <source xml:lang="en"><![CDATA[Why is HTTPS Everywhere preventing me from joining this hotel/school/other wireless network?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][1][answer" resname="128][field_questions][1][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;a name="captiveportal"&gt;</bpt><ept id="tjiid128-1">&lt;/a&gt;</ept><![CDATA[ ]]><bpt id="tjiid128-3">&lt;p&gt;</bpt><![CDATA[Some wireless networks hijack your HTTP connections when you first join them, in order to demand authentication or simply to try to make you agree to terms of use. HTTPS pages are protected against this type of hijacking, which is as it should be. If you go to a website that isn't protected by HTTPS Everywhere (currently, nytimes.com is one such site) that will allow your connection to be captured and redirected to the authentication or terms of use page.]]><ept id="tjiid128-3">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][2][question" resname="128][field_questions][2][question">
     <source xml:lang="en"><![CDATA[Will there be a version of HTTPS Everywhere for IE, Safari, or some other browser?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][2][answer" resname="128][field_questions][2][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><bpt id="tjiid128-2">&lt;a name="platform"&gt;</bpt><ept id="tjiid128-2">&lt;/a&gt;</ept><![CDATA[ As of early 2012, the Safari extension API does not offer a way to perform secure rewriting of http requests to https. But if you happen to know a way to perform secure request rewriting in these browsers, feel free to let us know at ]]><bpt id="tjiid128-4">&lt;tt&gt;</bpt><![CDATA[https-everywhere at EFF.org]]><ept id="tjiid128-4">&lt;/tt&gt;</ept><![CDATA[ (but note that modifying ]]><bpt id="tjiid128-6">&lt;tt&gt;</bpt><![CDATA[document.location]]><ept id="tjiid128-6">&lt;/tt&gt;</ept><![CDATA[ or ]]><bpt id="tjiid128-8">&lt;tt&gt;</bpt><![CDATA[window.location]]><ept id="tjiid128-8">&lt;/tt&gt;</ept><![CDATA[ in JavaScript is not secure).]]><ept id="tjiid128-1">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][3][question" resname="128][field_questions][3][question">
     <source xml:lang="en"><![CDATA[Why use a whitelist of sites that support HTTPS? Why can't you try to use HTTPS for every last site, and only fall back to HTTP if it isn't available?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][3][answer" resname="128][field_questions][3][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><bpt id="tjiid128-2">&lt;a name="automatic-https"&gt;</bpt><ept id="tjiid128-2">&lt;/a&gt;</ept><![CDATA[ There are several problems with the idea of trying to automatically detect HTTPS on every site. There is no guarantee that sites are going to give the same response via HTTPS that they give via HTTP. As of 2015, Forbes is a good example of this problem: compare these ]]><bpt id="tjiid128-4">&lt;a href="http://forbes.com"&gt;</bpt><![CDATA[HTTP]]><ept id="tjiid128-4">&lt;/a&gt;</ept><![CDATA[ and ]]><bpt id="tjiid128-6">&lt;a href="https://forbes.com"&gt;</bpt><![CDATA[HTTPS]]><ept id="tjiid128-6">&lt;/a&gt;</ept><![CDATA[ responses. Also, it's not possible to test for HTTPS in real time without introducing security vulnerabilities (What should the extension do if the HTTPS connection attempt fails? Falling back to insecure HTTP isn't safe). And in some cases, HTTPS Everywhere has to perform quite complicated transformations on URIs — for example until recently the Wikipedia rule had to turn an address like ]]><bpt id="tjiid128-8">&lt;tt&gt;</bpt><![CDATA[http://en.wikipedia.org/wiki/World_Wide_Web]]><ept id="tjiid128-8">&lt;/tt&gt;</ept><![CDATA[ into one like ]]><bpt id="tjiid128-10">&lt;tt&gt;</bpt><![CDATA[https://secure.wikimedia.org/wikipedia/en/wiki/World_Wide_Web]]><ept id="tjiid128-10">&lt;/tt&gt;</ept><![CDATA[ because HTTPS was not available on Wikipedia's usual domains.]]><ept id="tjiid128-1">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][4][question" resname="128][field_questions][4][question">
     <source xml:lang="en"><![CDATA[How do I get rid of/move the HTTPS Everywhere button in the toolbar?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][4][answer" resname="128][field_questions][4][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><bpt id="tjiid128-2">&lt;a name="toolbar"&gt;</bpt><ept id="tjiid128-2">&lt;/a&gt;</ept><![CDATA[ The HTTPS Everywhere button is useful because it allows you to see, and disable, a ruleset if it happens to be causing problems with a site. But if you'd rather disable it, go to View-&gt;Toolbars-&gt;Customize, and drag the button out of the toolbar into the Addons bar at the bottom of the page. Then you can hide the Addons bar. (In theory you should be able to drag it into the tray of available icons too, but that may trigger ]]><bpt id="tjiid128-4">&lt;a href="https://trac.torproject.org/projects/tor/ticket/6276"&gt;</bpt><![CDATA[this bug]]><ept id="tjiid128-4">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid128-1">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][5][question" resname="128][field_questions][5][question">
     <source xml:lang="en"><![CDATA[When does HTTPS Everywhere protect me? When does it not protect me?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][5][answer" resname="128][field_questions][5][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;a name="where"&gt;</bpt><ept id="tjiid128-1">&lt;/a&gt;</ept><![CDATA[

]]><bpt id="tjiid128-3">&lt;p&gt;</bpt><![CDATA[HTTPS Everywhere protects you only when you are using ]]><bpt id="tjiid128-4">&lt;em&gt;</bpt><![CDATA[encrypted portions of supported web sites]]><ept id="tjiid128-4">&lt;/em&gt;</ept><![CDATA[. On a supported site, it will automatically activate HTTPS encryption for all known supported parts of the site (for some sites, this might be only a portion of the entire site). For example, if your web mail provider does not support HTTPS at all, HTTPS Everywhere can't make your access to your web mail secure. Similarly, if a site allows HTTPS for text but not images, someone might be able to see which images your browser loads and guess what you're accessing.]]><ept id="tjiid128-3">&lt;/p&gt;</ept><![CDATA[

]]><bpt id="tjiid128-7">&lt;p&gt;</bpt><![CDATA[HTTPS Everywhere depends entirely on the security features of the individual web sites that you use; it ]]><bpt id="tjiid128-8">&lt;em&gt;</bpt><![CDATA[activates]]><ept id="tjiid128-8">&lt;/em&gt;</ept><![CDATA[ those security features, but it can't ]]><bpt id="tjiid128-10">&lt;em&gt;</bpt><![CDATA[create]]><ept id="tjiid128-10">&lt;/em&gt;</ept><![CDATA[ them if they don't already exist. If you use a site not supported by HTTPS Everywhere or a site that provides some information in an insecure way, HTTPS Everywhere can't provide additional protection for your use of that site. Please remember to check that a particular site's security is working to the level you expect before sending or receiving confidential information, including passwords.]]><ept id="tjiid128-7">&lt;/p&gt;</ept><![CDATA[

]]><bpt id="tjiid128-13">&lt;p&gt;</bpt><![CDATA[One way to determine what level of protection you're getting when using a particular site is to use a packet-sniffing tool like ]]><bpt id="tjiid128-14">&lt;a href="http://www.wireshark.org/"&gt;</bpt><![CDATA[Wireshark]]><ept id="tjiid128-14">&lt;/a&gt;</ept><![CDATA[ to record your own communications with the site. The resulting view of your communications is about the same as what an eavesdropper on your wifi network or at your ISP would see. This way, you can determine whether some or all of your communications would be protected; however, it may be quite time-consuming to make sense of the Wireshark output with enough care to get a definitive answer.]]><ept id="tjiid128-13">&lt;/p&gt;</ept><![CDATA[

]]><bpt id="tjiid128-17">&lt;p&gt;</bpt><![CDATA[You can also turn on the "Block all HTTP requesets" feature for added protection. Instead of loading insecure pages or images, HTTPS Everywhere will block them outright.]]><ept id="tjiid128-17">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][6][question" resname="128][field_questions][6][question">
     <source xml:lang="en"><![CDATA[What does HTTPS Everywhere protect me against?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][6][answer" resname="128][field_questions][6][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><ept id="tjiid128-1">&lt;/p&gt;</ept><bpt id="tjiid128-3">&lt;a name="threats"&gt;</bpt><ept id="tjiid128-3">&lt;/a&gt;</ept><bpt id="tjiid128-5">&lt;p&gt;</bpt><![CDATA[On supported parts of supported sites, HTTPS Everywhere enables the sites' HTTPS protection which can protect you against eavesdropping and tampering with the contents of the site or with the information you send to the site. Ideally, this provides some protection against an attacker learning the content of the information flowing in each direction — for instance, the text of e-mail messages you send or receive through a webmail site, the products you browse or purchase on an e-commerce site, or the particular articles you read on a reference site.]]><ept id="tjiid128-5">&lt;/p&gt;</ept><bpt id="tjiid128-7">&lt;p&gt;</bpt><![CDATA[However, HTTPS Everywhere ]]><bpt id="tjiid128-8">&lt;strong&gt;</bpt><![CDATA[does not conceal the identities of the sites you access]]><ept id="tjiid128-8">&lt;/strong&gt;</ept><![CDATA[, the amount of time you spend using them, or the amount of information you upload or download from a particular site. For example, if you access http://www.eff.org/issues/nsa-spying and HTTPS Everywhere rewrites it to https://www.eff.org/issues/nsa-spying, an eavesdropper can still trivially recognize that you are accessing www.eff.org (but might not know which issue you are reading about). In general, the entire hostname part of the URL remains exposed to the eavesdropper because this must be sent repeatedly in unencrypted form while setting up the connection. Another way of saying this is that HTTPS was never designed to conceal the identity of the sites that you visit.]]><ept id="tjiid128-7">&lt;/p&gt;</ept><bpt id="tjiid128-11">&lt;p&gt;</bpt><![CDATA[Researchers have also shown that it may be possible for someone to figure out more about what you're doing on a site merely through careful observation of the amount of data you upload and download, or the timing patterns of your use of the site. A simple example is that if the site only has one page of a certain total size, anyone downloading exactly that much data from the site is probably accessing that page.]]><ept id="tjiid128-11">&lt;/p&gt;</ept><bpt id="tjiid128-13">&lt;p&gt;</bpt><![CDATA[If you want to protect yourself against monitoring of the sites you visit, consider using HTTPS Everywhere together with software like ]]><bpt id="tjiid128-14">&lt;a href="https://www.torproject.org/"&gt;</bpt><![CDATA[Tor]]><ept id="tjiid128-14">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid128-13">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][7][question" resname="128][field_questions][7][question">
     <source xml:lang="en"><![CDATA[How do I get support for an additional site in HTTPS Everywhere?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][7][answer" resname="128][field_questions][7][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><bpt id="tjiid128-2">&lt;a name="sites"&gt;</bpt><ept id="tjiid128-2">&lt;/a&gt;</ept><![CDATA[ You can learn ]]><bpt id="tjiid128-4">&lt;a href="https://www.eff.org/https-everywhere/rulesets"&gt;</bpt><![CDATA[how to write rules]]><ept id="tjiid128-4">&lt;/a&gt;</ept><![CDATA[ that teach HTTPS Everywhere to support new sites. You can install these rules in your own browser or send them to us for possible inclusion in the official version.]]><ept id="tjiid128-1">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][8][question" resname="128][field_questions][8][question">
     <source xml:lang="en"><![CDATA[What if the site doesn't support HTTPS, or only supports it for some activities, like entering credit card information?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][8][answer" resname="128][field_questions][8][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><ept id="tjiid128-1">&lt;/p&gt;</ept><bpt id="tjiid128-3">&lt;a name="partial"&gt;</bpt><ept id="tjiid128-3">&lt;/a&gt;</ept><bpt id="tjiid128-5">&lt;a name="amo"&gt;</bpt><ept id="tjiid128-5">&lt;/a&gt;</ept><bpt id="tjiid128-7">&lt;p&gt;</bpt><![CDATA[You could try to contact the site and point out that using HTTPS for all site features is an increasingly common practice nowadays and protects users (and sites) against a variety of Internet attacks. For instance, it defends against the ability of other people on a wifi network to spy on your use of the site or even take over your account. You can also point out that credit card numbers aren't the only information you consider private or sensitive.]]><ept id="tjiid128-7">&lt;/p&gt;</ept><bpt id="tjiid128-9">&lt;p&gt;</bpt><![CDATA[Sites like Google, Twitter, and Facebook now support HTTPS for non-financial information — for general privacy and security reasons.]]><ept id="tjiid128-9">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][9][question" resname="128][field_questions][9][question">
     <source xml:lang="en"><![CDATA[Isn't it more expensive or slower for a site to support HTTPS compared to regular HTTP?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][9][answer" resname="128][field_questions][9][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><ept id="tjiid128-1">&lt;/p&gt;</ept><bpt id="tjiid128-3">&lt;a name="expensive"&gt;</bpt><ept id="tjiid128-3">&lt;/a&gt;</ept><bpt id="tjiid128-5">&lt;p&gt;</bpt><![CDATA[It can be, but some sites have been pleasantly surprised to see how practical it can be. Also, experts at Google are currently implementing several enhancements to the TLS protocol that make HTTPS dramatically faster; if these enhancements are added to the standard soon, the speed gap between the two should almost disappear. See ]]><bpt id="tjiid128-6">&lt;a href="http://www.imperialviolet.org/2010/06/25/overclocking-ssl.html"&gt;</bpt><![CDATA[Adam Langley's description of the HTTPS deployment situation]]><ept id="tjiid128-6">&lt;/a&gt;</ept><![CDATA[ for more details on these issues. Notably, Langley states: "In order to [enable HTTPS by default for Gmail] we had to deploy no additional machines and no special hardware. On our production frontend machines, SSL/TLS accounts for less than 1% of the CPU load, less than 10KB of memory per connection and less than 2% of network overhead."]]><ept id="tjiid128-5">&lt;/p&gt;</ept><bpt id="tjiid128-9">&lt;p&gt;</bpt><![CDATA[Although we're quite concerned about the certificate authority system, certificates in the current system are now quite cheap — paid certificates can cost just ten to twenty dollars a year.]]><ept id="tjiid128-9">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][10][question" resname="128][field_questions][10][question">
     <source xml:lang="en"><![CDATA[Why should I use HTTPS Everywhere instead of just typing https:// at the beginning of site names?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][10][answer" resname="128][field_questions][10][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><bpt id="tjiid128-2">&lt;a name="why"&gt;</bpt><ept id="tjiid128-2">&lt;/a&gt;</ept><![CDATA[ Even if you normally type https://, HTTPS Everywhere might protect you if you occasionally forget. Also, it can rewrite other people's links that you follow. For instance, if you click on a link to ]]><bpt id="tjiid128-4">&lt;a href="http://en.wikipedia.org/wiki/EFF_Pioneer_Award"&gt;</bpt><![CDATA[http://en.wikipedia.org/wiki/EFF_Pioneer_Award]]><ept id="tjiid128-4">&lt;/a&gt;</ept><![CDATA[, HTTPS Everywhere will automatically rewrite the link to ]]><bpt id="tjiid128-6">&lt;a href="https://secure.wikimedia.org/wikipedia/en/wiki/EFF_Pioneer_Award"&gt;</bpt><![CDATA[https://secure.wikimedia.org/wikipedia/en/wiki/EFF_Pioneer_Award]]><ept id="tjiid128-6">&lt;/a&gt;</ept><![CDATA[. Thus, you might get some protection even if you wouldn't have noticed that the target site is available in HTTPS.]]><ept id="tjiid128-1">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][11][question" resname="128][field_questions][11][question">
     <source xml:lang="en"><![CDATA[What's the meaning of the broken padlock icon at the bottom of the browser, or the warning that a site contains "insecure information" or "unauthenticated content"?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][11][answer" resname="128][field_questions][11][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><ept id="tjiid128-1">&lt;/p&gt;</ept><bpt id="tjiid128-3">&lt;a name="mixed-content"&gt;</bpt><ept id="tjiid128-3">&lt;/a&gt;</ept><bpt id="tjiid128-5">&lt;p&gt;</bpt><![CDATA[If a site is accessed over HTTPS and loads some parts of a page over insecure HTTP, the user might still be vulnerable to some attacks or some kinds of surveillance. For instance, the New York Times makes many HTML pages available in HTTPS, but other resources such as images, CSS, JavaScript, or third party ads and tracking beacons, are only loadable over HTTP. That means that these resources are sent unencrypted, and someone spying on you could probably infer the article you were reading.]]><ept id="tjiid128-5">&lt;/p&gt;</ept><bpt id="tjiid128-7">&lt;p&gt;</bpt><![CDATA[There are also potential vulnerabilities when parts of a page are loaded over HTTP because an attacker might replace them with versions containing false information, or Javascript code that helps the attacker spy on the user or take over an account.]]><ept id="tjiid128-7">&lt;/p&gt;</ept><bpt id="tjiid128-9">&lt;p&gt;</bpt><![CDATA[Currently, HTTPS Everywhere for Firefox does not try to forbid access to pages with mixed secure and insecure content, since the user would have been at least vulnerable to these risks already (although Chrome version 18+ has some built-in protections against insecure scripts in pages, and HTTPS Everywhere for Chrome will in fact trigger these on a site like the New York Times). If you encounter a page that contains mixed secure and insecure content, you can contact the responsible site and ask them to address this risk.]]><ept id="tjiid128-9">&lt;/p&gt;</ept><bpt id="tjiid128-11">&lt;p&gt;</bpt><![CDATA[We hope to provide a clearer solution for users who are especially concerned about the security risks from mixed-content pages, but the best general solution is to contact the operators of web sites that generate a mixed-content warning and ask them to fix their sites by making all the required resources available in HTTPS. ]]><bpt id="tjiid128-12">&lt;b&gt;</bpt><![CDATA[Update: in recent versions of Firefox, Mozilla has removed the broken padlock indicator. Now, the only difference between a secure and insecure HTTPS deployment is the blue or green tint on the left of the address bar for secure deployments]]><ept id="tjiid128-12">&lt;/b&gt;</ept><ept id="tjiid128-11">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][12][question" resname="128][field_questions][12][question">
     <source xml:lang="en"><![CDATA[Why does HTTPS Everywhere include rules for sites like PayPal that already require HTTPS on all their pages?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][12][answer" resname="128][field_questions][12][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><bpt id="tjiid128-2">&lt;a name="sslstrip"&gt;</bpt><ept id="tjiid128-2">&lt;/a&gt;</ept><![CDATA[ HTTPS Everywhere, like the ]]><bpt id="tjiid128-4">&lt;a href="http://www.w3.org/Security/wiki/Strict_Transport_Security"&gt;</bpt><![CDATA[HSTS protocol]]><ept id="tjiid128-4">&lt;/a&gt;</ept><![CDATA[, tries to address an attack called ]]><bpt id="tjiid128-6">&lt;a href="http://www.thoughtcrime.org/software/sslstrip/"&gt;</bpt><![CDATA[SSL stripping]]><ept id="tjiid128-6">&lt;/a&gt;</ept><![CDATA[. Users are only protected against the SSL stripping attack if their browsers don't even ]]><bpt id="tjiid128-8">&lt;em&gt;</bpt><![CDATA[try]]><ept id="tjiid128-8">&lt;/em&gt;</ept><![CDATA[ to connect to the HTTP version of the site — even if the site would have redirected them to the HTTPS version. With HTTPS Everywhere, the browser won't even attempt the insecure HTTP connection, even if that's what you ask it to do. (Note that HTTPS Everywhere currently does not include a comprehensive list of such sites, which are mainly financial institutions.)]]><ept id="tjiid128-1">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][13][question" resname="128][field_questions][13][question">
     <source xml:lang="en"><![CDATA[What do the different colors for rulesets in the toolbar menu mean?]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][13][answer" resname="128][field_questions][13][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><ept id="tjiid128-1">&lt;/p&gt;</ept><bpt id="tjiid128-3">&lt;a name="colors"&gt;</bpt><ept id="tjiid128-3">&lt;/a&gt;</ept><bpt id="tjiid128-5">&lt;p&gt;</bpt><![CDATA[The colors are:]]><ept id="tjiid128-5">&lt;/p&gt;</ept><bpt id="tjiid128-7">&lt;p&gt;</bpt><![CDATA[Dark Green: ruleset was active in loading the resources in the current page.]]><ept id="tjiid128-7">&lt;/p&gt;</ept><bpt id="tjiid128-9">&lt;p&gt;</bpt><![CDATA[Light Green: ruleset was ready to prevent HTTP loads in the current page, but everything that the ruleset would have covered was loaded over HTTPS anyway (in the code, light green is called a "moot rule").]]><ept id="tjiid128-9">&lt;/p&gt;</ept><bpt id="tjiid128-11">&lt;p&gt;</bpt><![CDATA[Dark Brown or Clockwise Red Arrow: broken rule -- the ruleset is active but the server is redirecting at least some URLs back from HTTPS to HTTP.]]><ept id="tjiid128-11">&lt;/p&gt;</ept><bpt id="tjiid128-13">&lt;p&gt;</bpt><![CDATA[Gray: the ruleset is disabled.]]><ept id="tjiid128-13">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][field_questions][14][question" resname="128][field_questions][14][question">
     <source xml:lang="en"><![CDATA[I'm having a problem installing the browser extension.]]></source>
     <target xml:lang="fa"/>
     <note>Question</note>
    </trans-unit>
    <trans-unit id="128][field_questions][14][answer" resname="128][field_questions][14][answer">
     <source xml:lang="en"><bpt id="tjiid128-1">&lt;p&gt;</bpt><bpt id="tjiid128-2">&lt;a name="problems-installing"&gt;</bpt><ept id="tjiid128-2">&lt;/a&gt;</ept><![CDATA[ Some people report that installing HTTPS Everywhere gives them the error: "The addon could not be downloaded because of a connection failure on www.eff.org." This may be caused by Avast anti-virus, which blocks installation of browser extensions. You may be able to ]]><bpt id="tjiid128-4">&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/https-everywhere/"&gt;</bpt><![CDATA[install from addons.mozilla.org instead]]><ept id="tjiid128-4">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid128-1">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Answer</note>
    </trans-unit>
    <trans-unit id="128][title_field][0][value" resname="128][title_field][0][value">
     <source xml:lang="en"><![CDATA[HTTPS Everywhere FAQ]]></source>
     <target xml:lang="fa"/>
     <note>Title</note>
    </trans-unit>
   </group>
   <group id="129">
    <note>HTTPS Everywhere</note>
    <trans-unit id="129][body][0][value" resname="129][body][0][value">
     <source xml:lang="en"><bpt id="tjiid129-1">&lt;p&gt;</bpt><![CDATA[HTTPS Everywhere is produced as a collaboration between ]]><bpt id="tjiid129-2">&lt;a href="https://www.torproject.org"&gt;</bpt><![CDATA[The Tor Project]]><ept id="tjiid129-2">&lt;/a&gt;</ept><![CDATA[ and the ]]><bpt id="tjiid129-4">&lt;a href="https://eff.org/"&gt;</bpt><![CDATA[Electronic Frontier Foundation]]><ept id="tjiid129-4">&lt;/a&gt;</ept><![CDATA[. Many sites on the web offer some limited support for encryption over ]]><bpt id="tjiid129-6">&lt;a href="https://en.wikipedia.org/wiki/HTTP_Secure"&gt;</bpt><![CDATA[HTTPS]]><ept id="tjiid129-6">&lt;/a&gt;</ept><![CDATA[, but make it difficult to use. For instance, they may default to unencrypted HTTP, or fill encrypted pages with links that go back to the unencrypted site. The HTTPS Everywhere extension fixes these problems by using ]]><bpt id="tjiid129-8">&lt;a href="https://www.xkcd.com/208"&gt;</bpt><![CDATA[clever technology]]><ept id="tjiid129-8">&lt;/a&gt;</ept><![CDATA[ to rewrite requests to these sites to HTTPS. Information about how to access the project's Git repository and get involved in development is ]]><bpt id="tjiid129-10">&lt;a href="/https-everywhere/development"&gt;</bpt><![CDATA[here]]><ept id="tjiid129-10">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid129-1">&lt;/p&gt;</ept><bpt id="tjiid129-13">&lt;p&gt;</bpt><bpt id="tjiid129-14">&lt;strong&gt;</bpt><![CDATA[Webmasters and prospective contributors:]]><ept id="tjiid129-14">&lt;/strong&gt;</ept><![CDATA[ Check the ]]><bpt id="tjiid129-16">&lt;a href="https://www.eff.org/https-everywhere/atlas"&gt;</bpt><![CDATA[HTTPS Everywhere Atlas]]><ept id="tjiid129-16">&lt;/a&gt;</ept><![CDATA[ to quickly see how existing HTTPS Everywhere rules affect sites you care about! HTTPS Everywhere is governed by EFF's ]]><bpt id="tjiid129-18">&lt;a href="https://www.eff.org/code/privacy"&gt;</bpt><![CDATA[Privacy Policy for Software]]><ept id="tjiid129-18">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid129-13">&lt;/p&gt;</ept><bpt id="tjiid129-21">&lt;p&gt;</bpt><bpt id="tjiid129-22">&lt;a name="problems-installing"&gt;</bpt><ept id="tjiid129-22">&lt;/a&gt;</ept><![CDATA[ ]]><bpt id="tjiid129-24">&lt;strong&gt;</bpt><![CDATA[Problems Installing: ]]><ept id="tjiid129-24">&lt;/strong&gt;</ept><![CDATA[Some people report that installing HTTPS Everywhere gives them the error: "The addon could not be downloaded because of a connection failure on ]]><bpt id="tjiid129-26">&lt;span class="moz-txt-link-abbreviated"&gt;</bpt><![CDATA[www.eff.org]]><ept id="tjiid129-26">&lt;/span&gt;</ept><![CDATA[." ]]><bpt id="tjiid129-28">&lt;a href="https://kittens.eff.org/https-everywhere/faq#problems-installing"&gt;</bpt><![CDATA[See this FAQ entry for help]]><ept id="tjiid129-28">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid129-21">&lt;/p&gt;</ept><bpt id="tjiid129-31">&lt;p&gt;</bpt><bpt id="tjiid129-32">&lt;a href="#" id="https-everywhere-more"&gt;</bpt><![CDATA[Read More About HTTPS Everywhere »]]><ept id="tjiid129-32">&lt;/a&gt;</ept><ept id="tjiid129-31">&lt;/p&gt;</ept><bpt id="tjiid129-35">&lt;div id="https-everywhere-hidden"&gt;</bpt><bpt id="tjiid129-36">&lt;h2&gt;</bpt><![CDATA[Questions and Caveats]]><ept id="tjiid129-36">&lt;/h2&gt;</ept><bpt id="tjiid129-38">&lt;p&gt;</bpt><![CDATA[Sadly, many sites still include a lot of content from third party domains that is not available over HTTPS. As always, if the browser's lock icon ]]><bpt id="tjiid129-39">&lt;a href="https://www.eff.org/https-everywhere/faq#mixed-content"&gt;</bpt><![CDATA[is broken or carries an exclamation mark]]><ept id="tjiid129-39">&lt;/a&gt;</ept><![CDATA[, you may remain vulnerable to some adversaries that use active attacks or traffic analysis. However, the effort that would be required to eavesdrop on your browsing should still be usefully increased. ]]><bpt id="tjiid129-41">&lt;strong&gt;</bpt><![CDATA[Update: in recent versions of Firefox, Mozilla has removed the broken padlock indicator. Now, the only difference between a secure and insecure HTTPS deployment is the blue or green tint on the left of the address bar for secure deployments]]><ept id="tjiid129-41">&lt;/strong&gt;</ept><![CDATA[ Answers to common questions may be on the ]]><bpt id="tjiid129-43">&lt;a href="/https-everywhere/faq/"&gt;</bpt><![CDATA[frequently asked questions]]><ept id="tjiid129-43">&lt;/a&gt;</ept><![CDATA[ page. ]]><bpt id="tjiid129-45">&lt;strong&gt;</bpt><![CDATA[HTTPS Everywhere can protect you only when you're using sites that support HTTPS and for which HTTPS Everywhere include a ]]><bpt id="tjiid129-46">&lt;a href="/https-everywhere/rulesets"&gt;</bpt><![CDATA[ruleset]]><ept id="tjiid129-46">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid129-45">&lt;/strong&gt;</ept><![CDATA[ If sites you use don't support HTTPS, ask the site operators to add it; only the site operator is able to enable HTTPS. There is more information and instruction on how server operators can do that in the EFF article ]]><bpt id="tjiid129-49">&lt;a href="/pages/how-deploy-https-correctly"&gt;</bpt><![CDATA[How to Deploy HTTPS Correctly]]><ept id="tjiid129-49">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid129-38">&lt;/p&gt;</ept><bpt id="tjiid129-52">&lt;h2&gt;</bpt><![CDATA[Development And Writing your own Rulesets]]><ept id="tjiid129-52">&lt;/h2&gt;</ept><bpt id="tjiid129-54">&lt;p&gt;</bpt><bpt id="tjiid129-55">&lt;strong&gt;</bpt><![CDATA[Webmasters and prospective contributors:]]><ept id="tjiid129-55">&lt;/strong&gt;</ept><![CDATA[ Check the ]]><bpt id="tjiid129-57">&lt;a href="https://www.eff.org/https-everywhere/atlas"&gt;</bpt><![CDATA[HTTPS Everywhere Atlas]]><ept id="tjiid129-57">&lt;/a&gt;</ept><![CDATA[ to quickly see how existing HTTPS Everywhere rules affect sites you care about! You can help us test forthcoming site support and new features by installing the ]]><bpt id="tjiid129-59">&lt;a href="/files/https-everywhere-devel.xpi"&gt;</bpt><![CDATA[development branch]]><ept id="tjiid129-59">&lt;/a&gt;</ept><![CDATA[ of the extension. HTTPS Everywhere uses small ruleset files to define which domains are redirected to https, and how. If you'd like to write your own ruleset, you can find out how to do that ]]><bpt id="tjiid129-61">&lt;a href="/https-everywhere/rulesets"&gt;</bpt><![CDATA[here]]><ept id="tjiid129-61">&lt;/a&gt;</ept><![CDATA[. Information about how to access the project's Git repository and get involved in development is ]]><bpt id="tjiid129-63">&lt;a href="/https-everywhere/development"&gt;</bpt><![CDATA[here]]><ept id="tjiid129-63">&lt;/a&gt;</ept><![CDATA[. Send feedback on this project to the ]]><bpt id="tjiid129-65">&lt;tt&gt;</bpt><![CDATA[https-everywhere AT eff.org]]><ept id="tjiid129-65">&lt;/tt&gt;</ept><![CDATA[ mailing list. Note that this is a public and publicly-archived mailing list. You can also ]]><bpt id="tjiid129-67">&lt;a href="https://lists.eff.org/mailman/listinfo/https-everywhere"&gt;</bpt><![CDATA[subscribe]]><ept id="tjiid129-67">&lt;/a&gt;</ept><![CDATA[. Send new rewrite rules or fixes to existing rewrite rules to the ]]><bpt id="tjiid129-69">&lt;tt&gt;</bpt><![CDATA[https-everywhere-rules AT eff.org]]><ept id="tjiid129-69">&lt;/tt&gt;</ept><![CDATA[ mailing list. Note that this is a public and publicly-archived mailing list. You can also ]]><bpt id="tjiid129-71">&lt;a href="https://lists.eff.org/mailman/listinfo/https-everywhere-rules"&gt;</bpt><![CDATA[subscribe]]><ept id="tjiid129-71">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid129-54">&lt;/p&gt;</ept><ept id="tjiid129-35">&lt;/div&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Body</note>
    </trans-unit>
    <trans-unit id="129][title_field][0][value" resname="129][title_field][0][value">
     <source xml:lang="en"><![CDATA[HTTPS Everywhere]]></source>
     <target xml:lang="fa"/>
     <note>Title</note>
    </trans-unit>
   </group>
   <group id="131">
    <note>How to Deploy HTTPS Correctly</note>
    <trans-unit id="131][body][0][value" resname="131][body][0][value">
     <source xml:lang="en"><bpt id="tjiid131-1">&lt;p class="eff-light-blue eff-grey"&gt;</bpt><![CDATA[By ]]><bpt id="tjiid131-2">&lt;a href="http://noncombatant.org"&gt;</bpt><![CDATA[Chris Palmer]]><ept id="tjiid131-2">&lt;/a&gt;</ept><![CDATA[ and ]]><bpt id="tjiid131-4">&lt;a href="/about/staff/yan-zhu"&gt;</bpt><![CDATA[Yan Zhu]]><ept id="tjiid131-4">&lt;/a&gt;</ept><ept id="tjiid131-1">&lt;/p&gt;</ept><bpt id="tjiid131-7">&lt;p&gt;</bpt><bpt id="tjiid131-8">&lt;em&gt;</bpt><![CDATA[Originally published on 15 Nov 2010. Revised on 12 Dec 2013.]]><ept id="tjiid131-8">&lt;/em&gt;</ept><ept id="tjiid131-7">&lt;/p&gt;</ept><bpt id="tjiid131-11">&lt;p&gt;</bpt><![CDATA[Internet technologists have always known that HTTP is insecure, causing many risks to users. Because HTTP traffic is unencrypted, any data sent over HTTP can be read and modified by anyone who has access to the network. As revealed by the Snowden NSA surveillance documents, HTTP traffic can also be collected and searched by government agencies without notice to users or webmasters. Given these risks, EFF believes that every website should support HTTPS on all pages as soon as possible.]]><ept id="tjiid131-11">&lt;/p&gt;</ept><bpt id="tjiid131-13">&lt;p&gt;</bpt><![CDATA[While HTTPS has long existed as the bare minimum for web security, some websites have been slow to adopt it. In part, this is because correctly and completely serving an application over HTTPS takes some care.]]><ept id="tjiid131-13">&lt;/p&gt;</ept><bpt id="tjiid131-15">&lt;p&gt;</bpt><![CDATA[This article is designed to encourage and assist website operators in implementing and improving HTTPS support. Although no precaution will defend against all threats, supporting HTTPS will protect users from a wide range of common attacks.]]><ept id="tjiid131-15">&lt;/p&gt;</ept><bpt id="tjiid131-17">&lt;h2&gt;</bpt><![CDATA[Background]]><ept id="tjiid131-17">&lt;/h2&gt;</ept><bpt id="tjiid131-19">&lt;p&gt;</bpt><![CDATA[HTTPS provides three security guarantees:]]><ept id="tjiid131-19">&lt;/p&gt;</ept><bpt id="tjiid131-21">&lt;ol&gt;</bpt><bpt id="tjiid131-22">&lt;li&gt;</bpt><bpt id="tjiid131-23">&lt;strong&gt;</bpt><![CDATA[Server authentication]]><ept id="tjiid131-23">&lt;/strong&gt;</ept><![CDATA[ allows users to have some confidence that they are talking to the true application server. Without this guarantee, there can be no guarantee of confidentiality or integrity.]]><ept id="tjiid131-22">&lt;/li&gt;</ept><bpt id="tjiid131-26">&lt;li&gt;</bpt><bpt id="tjiid131-27">&lt;strong&gt;</bpt><![CDATA[Data confidentiality]]><ept id="tjiid131-27">&lt;/strong&gt;</ept><![CDATA[ means that eavesdroppers cannot understand the content of the communications between the user's browser and the web server, because the data is encrypted.]]><ept id="tjiid131-26">&lt;/li&gt;</ept><bpt id="tjiid131-30">&lt;li&gt;</bpt><bpt id="tjiid131-31">&lt;strong&gt;</bpt><![CDATA[Data integrity]]><ept id="tjiid131-31">&lt;/strong&gt;</ept><![CDATA[ means that a network attacker cannot damage or alter the content of the communications between the user's browser and the web server, because they are validated with a cryptographic ]]><bpt id="tjiid131-33">&lt;em&gt;</bpt><bpt id="tjiid131-34">&lt;a href="https://secure.wikimedia.org/wikipedia/en/wiki/Message_authentication_code"&gt;</bpt><![CDATA[message authentication code]]><ept id="tjiid131-34">&lt;/a&gt;</ept><ept id="tjiid131-33">&lt;/em&gt;</ept><![CDATA[.]]><ept id="tjiid131-30">&lt;/li&gt;</ept><ept id="tjiid131-21">&lt;/ol&gt;</ept><bpt id="tjiid131-39">&lt;p&gt;</bpt><bpt id="tjiid131-40">&lt;strong&gt;</bpt><![CDATA[HTTP provides no security guarantees]]><ept id="tjiid131-40">&lt;/strong&gt;</ept><![CDATA[, and applications that use it ]]><bpt id="tjiid131-42">&lt;strong&gt;</bpt><![CDATA[cannot possibly provide users any security]]><ept id="tjiid131-42">&lt;/strong&gt;</ept><![CDATA[. When using a web application hosted via HTTP, people have no way of knowing whether they are talking to the true application server, nor can they be sure attackers have not read or modified communications between the user's computer and the server.]]><ept id="tjiid131-39">&lt;/p&gt;</ept><bpt id="tjiid131-45">&lt;h2&gt;</bpt><![CDATA[Modes of Attack and Defense]]><ept id="tjiid131-45">&lt;/h2&gt;</ept><bpt id="tjiid131-47">&lt;p&gt;</bpt><![CDATA[However users connect to the Internet, there are a variety of people who can attack them--whether spying on them, impersonating them, tampering with their communications, or all three of these. The wifi network operator can do this; any ISP in the path between client and server can do it; anyone who can reconfigure the wifi router or another router can do it; and often, anyone else using the same network can do it, too.]]><ept id="tjiid131-47">&lt;/p&gt;</ept><bpt id="tjiid131-49">&lt;p&gt;</bpt><bpt id="tjiid131-50">&lt;a href="http://codebutler.com/firesheep-a-day-later/"&gt;</bpt><![CDATA[Firesheep]]><ept id="tjiid131-50">&lt;/a&gt;</ept><![CDATA[ is an example of a ]]><bpt id="tjiid131-52">&lt;em&gt;</bpt><![CDATA[passive network attack]]><ept id="tjiid131-52">&lt;/em&gt;</ept><![CDATA[: it eavesdrops on the contents of network communications between browser and server, but does not re-route or modify them. Government surveillance programs such as ]]><bpt id="tjiid131-54">&lt;a href="http://www.theguardian.com/world/2013/jul/31/nsa-top-secret-program-online-data"&gt;</bpt><![CDATA[XKeyscore]]><ept id="tjiid131-54">&lt;/a&gt;</ept><![CDATA[ also use passive attacks on HTTP traffic to collect massive amounts of online communication data.]]><ept id="tjiid131-49">&lt;/p&gt;</ept><bpt id="tjiid131-57">&lt;p&gt;</bpt><![CDATA[By contrast, other freely-available tools perform ]]><bpt id="tjiid131-58">&lt;em&gt;</bpt><![CDATA[active network attacks]]><ept id="tjiid131-58">&lt;/em&gt;</ept><![CDATA[, in which the attacker does modify the contents of and/or re-route communications. These tools range from serious, such as ]]><bpt id="tjiid131-60">&lt;a href="http://www.thoughtcrime.org/software/sslstrip/"&gt;</bpt><![CDATA[sslstrip]]><ept id="tjiid131-60">&lt;/a&gt;</ept><![CDATA[, to silly, like ]]><bpt id="tjiid131-62">&lt;a href="http://www.ex-parrot.com/pete/upside-down-ternet.html"&gt;</bpt><![CDATA[the Upside-Down-Ternet]]><ept id="tjiid131-62">&lt;/a&gt;</ept><![CDATA[. Although Upside-Down-Ternet is a funny prank, it is technically identical to potentially more damaging attacks such as an attack that injects malicious code or incorrect information into web pages; at the same time, it shows that such attacks are easy enough to be jokes. Free wifi hotspots have been known to inject advertisements dynamically into web pages that users read--indicating that active network attacks are a viable business model. Tools like ]]><bpt id="tjiid131-64">&lt;a href="http://www.oxid.it/cain.html"&gt;</bpt><![CDATA[Cain and Abel]]><ept id="tjiid131-64">&lt;/a&gt;</ept><![CDATA[ enable a range of attacks, including re-routing local network traffic through the attacker's system. (Also see ]]><bpt id="tjiid131-66">&lt;a href="http://arpspoof.sourceforge.net/"&gt;</bpt><![CDATA[Arpspoof]]><ept id="tjiid131-66">&lt;/a&gt;</ept><![CDATA[ and ]]><bpt id="tjiid131-68">&lt;a href="http://www.monkey.org/%7Edugsong/dsniff/"&gt;</bpt><![CDATA[dsniff]]><ept id="tjiid131-68">&lt;/a&gt;</ept><![CDATA[.)]]><ept id="tjiid131-57">&lt;/p&gt;</ept><bpt id="tjiid131-71">&lt;p&gt;</bpt><![CDATA[Only a mechanism that provides (at least) authentication, confidentiality, and integrity can defend against a range of attacks. HTTPS is currently our best option for web applications.]]><ept id="tjiid131-71">&lt;/p&gt;</ept><bpt id="tjiid131-73">&lt;p&gt;</bpt><![CDATA[However, there are some potential pitfalls that site operators must avoid in order to deploy HTTPS securely.]]><ept id="tjiid131-73">&lt;/p&gt;</ept><bpt id="tjiid131-75">&lt;h2&gt;</bpt><![CDATA[Mixed Content]]><ept id="tjiid131-75">&lt;/h2&gt;</ept><bpt id="tjiid131-77">&lt;p&gt;</bpt><![CDATA[When hosting an application over HTTPS, there can be no ]]><bpt id="tjiid131-78">&lt;em&gt;</bpt><![CDATA[mixed content]]><ept id="tjiid131-78">&lt;/em&gt;</ept><![CDATA[; that is, all content in the page must be fetched via HTTPS. It is common to see partial HTTPS support on sites, in which the main pages are fetched via HTTPS but some or all of the media elements, stylesheets, and JavaScript in the page are fetched via HTTP.]]><ept id="tjiid131-77">&lt;/p&gt;</ept><bpt id="tjiid131-81">&lt;p&gt;</bpt><![CDATA[This is unsafe because although the main page load is protected against active and passive network attack, none of the other resources are. If a page loads some JavaScript or CSS code via HTTP, an attacker can provide a false, malicious code file and take over the page's DOM once it loads. Then, the user would be back to a situation of having no security. This is why all mainstream browsers warn users about pages that load mixed content. Nor is it safe to reference images via HTTP: What if the attacker swapped the Save Message and Delete Message icons in a webmail app?]]><ept id="tjiid131-81">&lt;/p&gt;</ept><bpt id="tjiid131-83">&lt;p&gt;</bpt><bpt id="tjiid131-84">&lt;strong&gt;</bpt><![CDATA[You must serve the entire application domain over HTTPS.]]><ept id="tjiid131-84">&lt;/strong&gt;</ept><![CDATA[ Redirect HTTP requests with HTTP 301 or 302 responses to the equivalent HTTPS resource.]]><ept id="tjiid131-83">&lt;/p&gt;</ept><bpt id="tjiid131-87">&lt;p&gt;</bpt><![CDATA[Some site operators provide only the login page over HTTPS, on the theory that only the user's password is sensitive. These sites' users are ]]><bpt id="tjiid131-88">&lt;a&gt;</bpt><![CDATA[vulnerable to passive and active attacks]]><ept id="tjiid131-88">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid131-87">&lt;/p&gt;</ept><bpt id="tjiid131-91">&lt;p&gt;</bpt><![CDATA[Unfortunately, many sites today load content from external sites and CDN's that do not support HTTPS. If it's not possible to serve these resources from your own host or another one that supports HTTPS, you should urge these other sites to start supporting HTTPS immediately.]]><ept id="tjiid131-91">&lt;/p&gt;</ept><bpt id="tjiid131-93">&lt;h2&gt;</bpt><![CDATA[Security and Cookies]]><ept id="tjiid131-93">&lt;/h2&gt;</ept><bpt id="tjiid131-95">&lt;p&gt;</bpt><![CDATA[As Chris Palmer described in a ]]><bpt id="tjiid131-96">&lt;a href="https://www.isecpartners.com/media/12009/web-session-management.pdf"&gt;</bpt><![CDATA[paper on secure session management for web applications]]><ept id="tjiid131-96">&lt;/a&gt;</ept><![CDATA[, site operators must scope sensitive cookies (such as cookies used for user authentication) to the secure origin. If a cookie is broadly scoped (with the Domain attribute in the Set-Cookie: header), it may "leak" to other hosts or applications in the same domain--potentially less-secure hosts or applications.]]><ept id="tjiid131-95">&lt;/p&gt;</ept><bpt id="tjiid131-99">&lt;p&gt;</bpt><![CDATA[Similarly, the application must set the Secure attribute on the cookie when setting it. This attribute instructs the browser to send the cookie only over secure (HTTPS) transport, never insecure (HTTP).]]><ept id="tjiid131-99">&lt;/p&gt;</ept><bpt id="tjiid131-101">&lt;h2&gt;</bpt><![CDATA[Use HTTP Strict Transport Security]]><ept id="tjiid131-101">&lt;/h2&gt;</ept><bpt id="tjiid131-103">&lt;p&gt;</bpt><bpt id="tjiid131-104">&lt;a href="https://en.wikipedia.org/wiki/Strict_Transport_Security"&gt;</bpt><![CDATA[HTTP Strict Transport Security]]><ept id="tjiid131-104">&lt;/a&gt;</ept><![CDATA[ (HSTS) is an HTTP protocol extension that enables site operators to instruct browsers to expect the site to use HTTPS.]]><ept id="tjiid131-103">&lt;/p&gt;</ept><bpt id="tjiid131-107">&lt;p&gt;</bpt><![CDATA[Although not all browsers yet support HSTS, EFF urges those that don't--we're looking especially at you, Apple and Microsoft--to follow the lead Google, Opera, and Mozilla have set by adopting this useful security mechanism. Indeed, ultimately we expect HTTPS (and possibly newer protocols such as ]]><bpt id="tjiid131-108">&lt;a href="https://en.wikipedia.org/wiki/SPDY"&gt;</bpt><![CDATA[SPDY]]><ept id="tjiid131-108">&lt;/a&gt;</ept><![CDATA[ and ]]><bpt id="tjiid131-110">&lt;a href="https://en.wikipedia.org/wiki/QUIC"&gt;</bpt><![CDATA[QUIC]]><ept id="tjiid131-110">&lt;/a&gt;</ept><![CDATA[) to replace HTTP entirely, the way SSH replaced Telnet and rsh.]]><ept id="tjiid131-107">&lt;/p&gt;</ept><bpt id="tjiid131-113">&lt;p&gt;</bpt><![CDATA[As an extra precaution, your site should support HSTS preloading, which prevents interception of an HTTP request if the browser hasn't yet received a valid HSTS header from the server. HSTS preloading is implemented via an opt-in list of domains that is included in Chromium, Google Chrome, and Firefox. See ]]><bpt id="tjiid131-114">&lt;a href="http://www.chromium.org/sts"&gt;</bpt><![CDATA[Chromium's page]]><ept id="tjiid131-114">&lt;/a&gt;</ept><![CDATA[ for instructions on getting your site added to this list. Note that you must also send an HSTS header with a max-age greater value than 18 weeks for Firefox to include your site in their HSTS preload list.]]><ept id="tjiid131-113">&lt;/p&gt;</ept><bpt id="tjiid131-117">&lt;p&gt;</bpt><![CDATA[We recently enabled HSTS and HSTS preloading for eff.org. It took less than an hour to set up, and we found a way to do it without forcibly redirecting users to HTTPS, so we can state an unequivocal preference for HTTPS access while still making the site available in HTTP. It worked like a charm and a significant fraction of our users are now automatically accessing our site in HTTPS, perhaps without even knowing it.]]><ept id="tjiid131-117">&lt;/p&gt;</ept><bpt id="tjiid131-119">&lt;h2&gt;</bpt><![CDATA[Choose Strong Protocols and Cipher Suites]]><ept id="tjiid131-119">&lt;/h2&gt;</ept><bpt id="tjiid131-121">&lt;p&gt;</bpt><![CDATA[Here is a brief list of recommendations for choosing secure protocols and cipher suites in an SSL deployment:]]><ept id="tjiid131-121">&lt;/p&gt;</ept><bpt id="tjiid131-123">&lt;ul&gt;</bpt><bpt id="tjiid131-124">&lt;li&gt;</bpt><![CDATA[Disable support for SSLv2, SSLv3, and TLS 1.0.]]><ept id="tjiid131-124">&lt;/li&gt;</ept><bpt id="tjiid131-126">&lt;li&gt;</bpt><![CDATA[Support TLS 1.1 and 1.2.]]><ept id="tjiid131-126">&lt;/li&gt;</ept><bpt id="tjiid131-128">&lt;li&gt;</bpt><![CDATA[Disable NULL, aNULL, and eNULL ciphersuites, which do not offer both encryption and authentication.]]><ept id="tjiid131-128">&lt;/li&gt;</ept><bpt id="tjiid131-130">&lt;li&gt;</bpt><![CDATA[Use private keys that are at least as secure as a 2048-bit RSA key.]]><ept id="tjiid131-130">&lt;/li&gt;</ept><bpt id="tjiid131-132">&lt;li&gt;</bpt><![CDATA[Prefer ciphersuites that include ]]><bpt id="tjiid131-133">&lt;b&gt;</bpt><![CDATA[ephemeral Diffie-Hellman key exchange]]><ept id="tjiid131-133">&lt;/b&gt;</ept><![CDATA[. These offer the important property of ]]><bpt id="tjiid131-135">&lt;a href="https://www.eff.org/deeplinks/2013/08/pushing-perfect-forward-secrecy-important-web-privacy-protection"&gt;</bpt><![CDATA[Perfect Forward Secrecy]]><ept id="tjiid131-135">&lt;/a&gt;</ept><![CDATA[, which prevents decryption of past web traffic if your SSL private key is compromised in the future.]]><ept id="tjiid131-132">&lt;/li&gt;</ept><bpt id="tjiid131-138">&lt;li&gt;</bpt><![CDATA[Disable ciphersuites with keys sizes smaller than 128 bits for encryption.]]><ept id="tjiid131-138">&lt;/li&gt;</ept><bpt id="tjiid131-140">&lt;li&gt;</bpt><![CDATA[Disable ciphersuites that use MD5 for hashing. SHA-1 is also discouraged but may be required for compatibility with TLS 1.0 and SSLv3.]]><ept id="tjiid131-140">&lt;/li&gt;</ept><bpt id="tjiid131-142">&lt;li&gt;</bpt><![CDATA[Disable ciphersuites that use RC4 for encryption. AES-CBC is preferable to RC4 but vulnerable to the ]]><bpt id="tjiid131-143">&lt;a href="https://www.imperialviolet.org/2011/09/23/chromeandbeast.html"&gt;</bpt><![CDATA[BEAST]]><ept id="tjiid131-143">&lt;/a&gt;</ept><![CDATA[ attack. Thus, AES-GCM is often recommended.]]><ept id="tjiid131-142">&lt;/li&gt;</ept><bpt id="tjiid131-146">&lt;li&gt;</bpt><![CDATA[Disable TLS compression in order to prevent the ]]><bpt id="tjiid131-147">&lt;a href="https://en.wikipedia.org/wiki/CRIME_%28security_exploit%29"&gt;</bpt><![CDATA[CRIME attack]]><ept id="tjiid131-147">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid131-146">&lt;/li&gt;</ept><bpt id="tjiid131-150">&lt;li&gt;</bpt><![CDATA[Only support secure TLS renegotiations compliant with ]]><bpt id="tjiid131-151">&lt;a href="http://www.ietf.org/rfc/rfc5746.txt"&gt;</bpt><![CDATA[RFC 5746]]><ept id="tjiid131-151">&lt;/a&gt;</ept><![CDATA[, or disable TLS renegotiations entirely.]]><ept id="tjiid131-150">&lt;/li&gt;</ept><ept id="tjiid131-123">&lt;/ul&gt;</ept><bpt id="tjiid131-155">&lt;p&gt;</bpt><![CDATA[A useful tool for testing for well-known weaknesses in an existing HTTPS deployment is Qualys's ]]><bpt id="tjiid131-156">&lt;a href="https://www.ssllabs.com/ssltest/"&gt;</bpt><![CDATA[SSL Server Test]]><ept id="tjiid131-156">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid131-155">&lt;/p&gt;</ept><bpt id="tjiid131-159">&lt;h2&gt;</bpt><![CDATA[Performance Concerns]]><ept id="tjiid131-159">&lt;/h2&gt;</ept><bpt id="tjiid131-161">&lt;p&gt;</bpt><![CDATA[Many site operators report that they can't move to HTTPS for performance reasons. However, most people who say this have not actually measured any performance loss, may not have measured performance at all, and have not profiled and optimized their site's behavior. Usually, sites have latency far higher and/or throughput far lower than necessary even when hosting over HTTP--indicating HTTPS is not the problem.]]><ept id="tjiid131-161">&lt;/p&gt;</ept><bpt id="tjiid131-163">&lt;p&gt;</bpt><![CDATA[The crux of the performance problem is usually at the content layer, and also often at the database layer. Web applications are fundamentally I/O-bound, after all. Consider ]]><bpt id="tjiid131-164">&lt;a href="http://gmailblog.blogspot.com/2008/05/need-for-speed-path-to-faster-loading.html"&gt;</bpt><![CDATA[this wisdom from the Gmail developers]]><ept id="tjiid131-164">&lt;/a&gt;</ept><![CDATA[:]]><ept id="tjiid131-163">&lt;/p&gt;</ept><bpt id="tjiid131-167">&lt;blockquote&gt;</bpt><bpt id="tjiid131-168">&lt;p&gt;</bpt><![CDATA[First, we listed every transaction between the web browser and Google's servers, starting with the moment the "Sign in" button is pressed. To do this, we used a lot of different web development tools, like ]]><bpt id="tjiid131-169">&lt;a href="http://httpwatch.com/"&gt;</bpt><![CDATA[Httpwatch]]><ept id="tjiid131-169">&lt;/a&gt;</ept><![CDATA[, ]]><bpt id="tjiid131-171">&lt;a href="http://www.wireshark.org/"&gt;</bpt><![CDATA[WireShark]]><ept id="tjiid131-171">&lt;/a&gt;</ept><![CDATA[, and ]]><bpt id="tjiid131-173">&lt;a href="http://www.fiddlertool.com/fiddler/"&gt;</bpt><![CDATA[Fiddler]]><ept id="tjiid131-173">&lt;/a&gt;</ept><![CDATA[, plus our own performance measuring systems. [...]]]><ept id="tjiid131-168">&lt;/p&gt;</ept><bpt id="tjiid131-176">&lt;p&gt;</bpt><![CDATA[We spent hours poring over these traces to see exactly what was happening between the browser and Gmail during the sign-in sequence, and we found that there were between fourteen and twenty-four HTTP requests required to load an inbox and display it. To put these numbers in perspective, a popular network news site's home page required about a 180 requests to fully load when I checked it yesterday. But when we examined our requests, we realized that we could do better. We decided to attack the problem from several directions at once: reduce the number of overall requests, make more of the requests cacheable by the browser, and reduce the overhead of each request.]]><ept id="tjiid131-176">&lt;/p&gt;</ept><bpt id="tjiid131-178">&lt;p&gt;</bpt><![CDATA[We made good progress on every front. We reduced the weight of each request itself by eliminating or narrowing the scope of some of our cookies. We made sure that all our images were cacheable by the browser, and we consolidated small icon images into single meta-images, a technique known as spriting. We combined several requests into a single combined request and response. The result is that it now takes as few as four requests from the click of the "Sign in" button to the display of your inbox.]]><ept id="tjiid131-178">&lt;/p&gt;</ept><ept id="tjiid131-167">&lt;/blockquote&gt;</ept><bpt id="tjiid131-181">&lt;p&gt;</bpt><![CDATA[Google's ]]><bpt id="tjiid131-182">&lt;a href="http://www.imperialviolet.org/2010/06/25/overclocking-ssl.html"&gt;</bpt><![CDATA[Adam Langley provides additional detail]]><ept id="tjiid131-182">&lt;/a&gt;</ept><![CDATA[:]]><ept id="tjiid131-181">&lt;/p&gt;</ept><bpt id="tjiid131-185">&lt;blockquote&gt;</bpt><![CDATA[In order to do this we had to deploy ]]><bpt id="tjiid131-186">&lt;em&gt;</bpt><![CDATA[no additional machines]]><ept id="tjiid131-186">&lt;/em&gt;</ept><![CDATA[ and ]]><bpt id="tjiid131-188">&lt;em&gt;</bpt><![CDATA[no special hardware]]><ept id="tjiid131-188">&lt;/em&gt;</ept><![CDATA[. On our production frontend machines, SSL/TLS accounts for less than 1% of the CPU load, less than 10KB of memory per connection and less than 2% of network overhead. Many people believe that SSL takes a lot of CPU time and we hope the above numbers (public for the first time) will help to dispel that. [emphasis in original]]]><ept id="tjiid131-185">&lt;/blockquote&gt;</ept><bpt id="tjiid131-191">&lt;p&gt;</bpt><![CDATA[Is it any wonder Gmail performs well, even when using HTTPS exclusively? Site operators can realize incremental improvement by gradually tuning their web applications. Chris gave a presentation to this effect at ]]><bpt id="tjiid131-192">&lt;a href="http://assets.en.oreilly.com/1/event/22/High%20Performance,%20Low%20Cost,%20and%20Strong%20Security_%20Pick%20Any%20Three%20Presentation.pdf"&gt;</bpt><![CDATA[Web 2.0 Expo 2009]]><ept id="tjiid131-192">&lt;/a&gt;</ept><![CDATA[.]]><ept id="tjiid131-191">&lt;/p&gt;</ept><bpt id="tjiid131-195">&lt;h2&gt;</bpt><![CDATA[Conclusion]]><ept id="tjiid131-195">&lt;/h2&gt;</ept><bpt id="tjiid131-197">&lt;p&gt;</bpt><![CDATA[HTTPS provides the baseline of safety for web application users, and there is no performance- or cost-based reason to stick with HTTP. Web application providers ]]><bpt id="tjiid131-198">&lt;a href="http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1421553"&gt;</bpt><![CDATA[undermine their business models]]><ept id="tjiid131-198">&lt;/a&gt;</ept><![CDATA[ when, by continuing to use HTTP, they enable a wide range of attackers anywhere on the internet to compromise users' information.]]><ept id="tjiid131-197">&lt;/p&gt;</ept></source>
     <target xml:lang="fa"/>
     <note>Body</note>
    </trans-unit>
    <trans-unit id="131][title_field][0][value" resname="131][title_field][0][value">
     <source xml:lang="en"><![CDATA[How to Deploy HTTPS Correctly]]></source>
     <target xml:lang="fa"/>
     <note>Title</note>
    </trans-unit>
   </group>
  </body>
 </file>
</xliff>
